#ifndef _NGX_HTTP_SIGN_MODULE_H_INCLUDED_
#define _NGX_HTTP_SIGN_MODULE_H_INCLUDED_


enum {
	NGX_HTTP_SIGN_OFF,
	NGX_HTTP_SIGN_ON,
};

enum {
	NGX_HTTP_SIGN_BLOCK_NONE,
	NGX_HTTP_SIGN_BLOCK_HIGH,
	NGX_HTTP_SIGN_BLOCK_MEDIUM,
	NGX_HTTP_SIGN_BLOCK_ALL,
};

enum{
	NGX_HTTP_SIGN_LOG_NONE,
	NGX_HTTP_SIGN_LOG_BLOCK,
	NGX_HTTP_SIGN_LOG_ALL,
};

enum {
	NGX_HTTP_SIGN_VAR_IS_BLOCK = 1,
	NGX_HTTP_SIGN_VAR_IS_ATTACK,
};

enum {
	NGX_HTTP_SIGN_VAR_DECODED_URI = 1,
	NGX_HTTP_SIGN_VAR_DECODED_COOKIE,
	NGX_HTTP_SIGN_VAR_DECODED_REFERENCE,
	NGX_HTTP_SIGN_VAR_DECODED_USERAGENT,
	NGX_HTTP_SIGN_VAR_DECODED_XFORWARDF,
	NGX_HTTP_SIGN_VAR_DECODED_COOKIE_,
	NGX_HTTP_SIGN_VAR_DECODED_ARG_,

	NGX_HTTP_SIGN_VAR_DECODED_MAX,
};

enum {
	NGX_HTTP_DECODER_BASE64,
	NGX_HTTP_DECODER_URL,
	NGX_HTTP_DECODER_UTF7,
	NGX_HTTP_DECODER_UTF8,
	NGX_HTTP_DECODER_HEX,
	NGX_HTTP_DECODER_JSON,
	NGX_HTTP_DECODER_BACKSLASH,
	NGX_HTTP_DECODER_XML,
	NGX_HTTP_DECODER_HTML,
	NGX_HTTP_DECODER_PHPSEQ,
	NGX_HTTP_DECODER_UNICODE,

	NGX_HTTP_DECODER_MAX = 32, /* 4byte int */
};

#define NGX_HTTP_DECODE_BASE64			(1<<NGX_HTTP_DECODER_BASE64) /* 0x000000001 */
#define NGX_HTTP_DECODE_URL				(1<<NGX_HTTP_DECODER_URL)
#define NGX_HTTP_DECODE_UTF7			(1<<NGX_HTTP_DECODER_UTF7)
#define NGX_HTTP_DECODE_UTF8			(1<<NGX_HTTP_DECODER_UTF8)
#define NGX_HTTP_DECODE_HEX				(1<<NGX_HTTP_DECODER_HEX)
#define	NGX_HTTP_DECODE_JSON			(1<<NGX_HTTP_DECODER_JSON)
#define NGX_HTTP_DECODE_BACKSLASH		(1<<NGX_HTTP_DECODER_BACKSLASH)
#define NGX_HTTP_DECODE_XML				(1<<NGX_HTTP_DECODER_XML)
#define NGX_HTTP_DECODE_HTML			(1<<NGX_HTTP_DECODER_HTML)
#define NGX_HTTP_DECODE_PHPSEQ			(1<<NGX_HTTP_DECODER_PHPSEQ)
#define NGX_HTTP_DECODE_UNICODE			(1<<NGX_HTTP_DECODER_UNICODE)

typedef struct {
	ngx_uint_t enable;
	ngx_uint_t block;
	ngx_uint_t log;
	ngx_uint_t decode;
	size_t check_body_size;
} ngx_http_sign_loc_conf_t;

typedef	struct {
		ngx_str_t s;
		ngx_uint_t id;
		void (*trans)(ngx_http_variable_value_t *vv, proto_data *pda, void *para);
		void *para;
} ngx_http_sign_var_t;


#endif
